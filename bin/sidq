#!/usr/bin/perl
#
# sidq
# Created by: Adam Jacob, Marchex, <adam@marchex.com>
# Created on: 09/23/2006 02:34:55 PM PDT
#
# $Id: sid,v 1.3 2006/10/11 00:23:15 adam Exp $

use FindBin;
use lib ( "$FindBin::Bin/../lib" );

use strict;
use warnings;

use Getopt::Long;
use Log::Log4perl;
use Pod::Usage;
use Sid::Format;
use Sid::Client;
use Exception::Class::TryCatch;
use Sub::Name;
my $tmpdir = "$FindBin::Bin/../tmp";
my $debuglevel = "ERROR";
my $server;
my $query;
my $output_filter = 'Tab';
my @fields;

my $man = 0;
my $help = 0;
GetOptions(
    's|server=s' => \$server,
    'q|query=s' => \$query,
    'f|field=s' => \@fields,
    'o|output-filter=s' => \$output_filter,
    'L|debug=s' => \$debuglevel,
    'help|?' => \$help,
    'man' => \$man,
);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

pod2usage(-exitstatus => 1, -msg => "You must supply -q") unless defined $query;

$debuglevel = uc($debuglevel);

my %logconf = ( 
"log4perl.logger.rootLogger" => "$debuglevel, Stderr",
"log4perl.logger.Sid.Format.Output" => "INFO, Stdout",
"log4perl.appender.Stdout" => 'Log::Log4perl::Appender::Screen',
"log4perl.appender.Stdout.layout" => 'Log::Log4perl::Layout::PatternLayout',
"log4perl.appender.Stdout.stderr" => 0,
"log4perl.appender.Stdout.layout.ConversionPattern" => '%m%n',
"log4perl.appender.Stderr" => 'Log::Log4perl::Appender::Screen',
"log4perl.appender.Stderr.layout" => 'Log::Log4perl::Layout::PatternLayout',
"log4perl.appender.Stderr.stderr" => 1,
"log4perl.appender.Stderr.layout.ConversionPattern" => '%m%n',
);

Log::Log4perl->init(\%logconf);

my $client;
if (defined($server)) {
    pod2usage(-exitstatus => 1, -msg => "Server must be an http url") unless ($server =~ /^http/);
    
    $client = Sid::Client->new(server => $server);
} else {
    $client = Sid::Client->new;
}
my $response;
if (scalar(@fields)) {
    $response = $client->search(
        query => $query,
        fields => \@fields,
    );
} else {
    $response = $client->search(
        query => $query,
    );
}

if (scalar(@{$response})) {
    my $format = Sid::Format->new(output_filter => $output_filter);
    $format->output_search(
        search_data => $response,
    );
} else {
    my $logger = Log::Log4perl->get_logger("Sid.Format.Output");
    $logger->error("Search returned 0 results");
    exit 5;
}

exit 0;

__END__

=head1 NAME

sidq - Search the Sid system. 

=head1 SYNOPSIS

sidq [options]

  Options:
   -s, -server         The Sid Service to Talk to (must be an URL.) 
   -q, -query          The query to ask. 
   -f, -field          One or more fields to return; can appear more than once.
   -o, -output-filter  The output filter to use. (Tab, LDIF)
   -L, -debug          A Log4Perl debug level. 

=head1 OPTIONS

=over 8

=item B<-s or -server>

This should be the base URL of a Sid Service.  Defaults to http://sid.

=item B<-q or -query> (required)

The query to ask.  Should likely include at least the "type:" field.

=item B<-f or -field> 

A field to return.  You can specify more than one, and they will come
out in that order.  The LDIF output filter ignores the order, as LDIF
does too.

=item B<-o or -output-filter> 

The output filter to use.  Current options are:

   Tab  - A tab delimited output suitable for use with 
          common shell tools.
   LDIF - Returns each object as an LDAP style LDIF entry.

=item B<-L or -debug>

Sets a Log4perl debug level.  If you set this to DEBUG, sid will get
super chatty on STDOUT.  Defaults to ERROR.

=back

=head1 DESCRIPTION

B<sid> searches the Sid Service, and returns the results in multiple output
formats. 

=cut
