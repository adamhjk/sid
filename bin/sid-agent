#!/usr/bin/perl
#
# sid-agent
# Created by: Adam Jacob, Marchex, <adam@marchex.com>
# Created on: 09/23/2006 02:34:55 PM PDT
#
# $Id: sid,v 1.3 2006/10/11 00:23:15 adam Exp $

use FindBin;
use lib ( "$FindBin::Bin/../lib" );

use strict;
use warnings;

use Getopt::Long;
use Log::Log4perl;
use Pod::Usage;
use Sid::Agent;
use Config::General;

my $tmpdir = "$FindBin::Bin/../tmp";
my $debuglevel = "ERROR";
my $server;
my $config_file;
my $agent_id;
my $description = "Sid Agent";
my $run_directory = "$FindBin::Bin/../run";
my $no_update = 0;
my $show_data = 0;
my $wait_time = 0;
my @plugins;

my $man = 0;
my $help = 0;
GetOptions(
    's|server=s' => \$server,
    'a|agent-id=s' => \$agent_id,
    'c|config-file=s' => \$config_file,
    'p|plugin=s' => \@plugins,
    'r|run-directory=s' => \$run_directory,
    't|tmp-directory=s' => \$tmpdir,
    'w|wait-time=i' => \$wait_time,
    'd|description=s' => \$description,
    'n|no-update' => \$no_update,
    'o|output-data' => \$show_data,
    'L|debug=s' => \$debuglevel,
    'help|?' => \$help,
    'man' => \$man,
);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

pod2usage(-exitstatus => 1, -msg => "You must supply --plugin or --config-file") unless scalar(@plugins) || defined $config_file;

$debuglevel = uc($debuglevel);

my %logconf = ( 
"log4perl.logger.Sid" => "$debuglevel, Stdout",
"log4perl.appender.Stdout" => 'Log::Log4perl::Appender::Screen',
"log4perl.appender.Stdout.layout" => 'Log::Log4perl::Layout::PatternLayout',
"log4perl.appender.Stdout.stderr" => 0,
"log4perl.appender.Stdout.layout.ConversionPattern" => '%m%n',
);

Log::Log4perl->init(\%logconf);

my $agent_args = {};
if (defined($config_file)) {
    my $conf = Config::General->new(
        -ConfigFile => $config_file,
        -LowerCaseNames => 1,
        -AutoTrue => 1,
    );
    my %config = $conf->getall;

    $agent_args->{'server'} = $config{'server'} if exists($config{'server'});
    $agent_args->{'agent_id'} = $config{'agent_id'} if exists($config{'agent_id'});
    if (! exists($config{'plugin'})) {
        pod2usage(-exitstatus => 1, -msg => "You must supply Plugin entires in the config file!");
    } 
    if (ref($config{'plugin'}) eq "ARRAY") {
        $agent_args->{'plugins'} = $config{'plugin'};
    } else {
        $agent_args->{'plugins'} = [$config{'plugin'}];
    }
    $agent_args->{'tmp_dir'} = $config{'tmpdirectory'} if exists($config{'tmpdirectory'});
    $agent_args->{'run_dir'} = $config{'rundirectory'} if exists($config{'rundirectory'});
    $agent_args->{'description'} = $config{'description'} if exists($config{'description'});
    $wait_time = $config{'wait-time'} if exists($config{'wait-time'});
} else {
    $agent_args->{'server'} = $server if defined($server);
    $agent_args->{'agent_id'} = $agent_id if defined($agent_id);
    $agent_args->{'plugins'} = \@plugins;
    $agent_args->{'run_dir'} = $run_directory;
    $agent_args->{'tmp_dir'} = $tmpdir;
    $agent_args->{'description'} = $description;
}

if ($wait_time) {
    my $how_long = int(rand($wait_time));
    my $logger = Log::Log4perl->get_logger("Sid");
    $logger->debug("Waiting for $how_long seconds");
    sleep($how_long);
}

my $agent = Sid::Agent->new($agent_args);
if ($no_update) {
    $agent->run(update => 0);
} else {
    $agent->register;
    $agent->run;
}

if ($no_update || $show_data) {
    print $agent->dump_data;
}

exit 0;

__END__

=head1 NAME

sid-agent - Run a series of Sid Plugins. 

=head1 SYNOPSIS

sid-agent [options]

  Options:
   -s, -server         The Sid Service to Talk to (must be an URL.) 
   -p, -plugin         A Sid Plugin to Run (can be specified multiple times)
   -c, -config-file    A Configuration File to Load, in lieu of other options.
   -a, -agent-id       The Agent ID for this run.
   -r, -run-directory  A directory for creating run-time files. 
   -d, -description    The description for this Agent
   -w, -wait-time      If specified, will sleep a random number of seconds 
                       up to wait-time.
   -n, -no-update      Don't update the server, and print the results to 
                       STDOUT
   -o, -output-data    Print out the data we submited to the Service.
   -L, -debug          A Log4Perl debug level. 

=head1 OPTIONS

=over 8

=item B<-s or -server>

This should be the base URL of a Sid Service.  Defaults to http://sid.

=item B<-p or -plugin> (required)

You must specify at least one plugin to run, unless you are using a
configuration file with the B<-config-file> option.

=item B<-c or -config-file> (required)

Loads a configuration file, saving you the trouble of always giving
command line options.

=item B<-a or -agent-id>

This option sets the agent-id for this run, bypassing the default
agent-id.

=item B<-r or -run-directory> 

If you don't specify an agent_id, we use the default, which is stored
in this directory as sid-agent.uuid.

=item B<-d or -description> 

Sets the description for this agent.

=item B<-w or -wait-time>

If this is set, the agent will sleep for some number of seconds up to
the specified time.  Useful for spreading out the timing in a common cron job.

=item B<-n or -no-update> 

Don't update the service, just run the plugins.  Handy for debugging.
Implies -o.

=item B<-o or -output-data>
 
Show the data we submitted to the service.  Prints YAML to STDOUT.

=item B<-L or -debug>

Sets a Log4perl debug level.  If you set this to DEBUG, sid will get
super chatty on STDOUT.  Defaults to ERROR.

=back

=head1 DESCRIPTION

B<sid-agent> runs a list of Sid Plugins, updating the Sid Service.

=cut
